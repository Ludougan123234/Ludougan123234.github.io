data <- read.delim(text = "USER|REEIVE|OPEN|BUY
1|1|1|1
2|1|1|0
3|1|1|1
4|1|0|0
5|1|0|0
6|1|1|0", header = TRUE, sep = "|")
data <- read.delim(text = "USER|REEIVE|OPEN|BUY
1|1|1|1
2|1|1|0
3|1|1|1
4|1|0|0
5|1|0|0
6|1|1|0", header = TRUE, sep = "|")
data
m <- as.matrix(dta[,2:4])
m <- as.matrix(data[,2:4])
m
t(m) %*% m
?t
?%*%
t(m)
install.packages("keras")
library(keras)
fashion_mnist <- dataset_fashion_mnist()
fashion_mnist <- dataset_fashion_mnist()
head(fashion_mnist)
fashion_mnist <- dataset_fashion_mnist()
View(my_mean)
library(keras)
fashion_mnist <- dataset_fashion_mnist()
View(fashion_mnist)
library(keras)
fashion_mnist <- dataset_fashion_mnist()
tf$constant("hi")
data <- read.delim(text = "USER|REEIVE|OPEN|BUY
1|1|1|1
2|1|1|0
3|1|1|1
4|1|0|0
5|1|0|0
6|1|1|0", header = TRUE, sep = "|")
data
m <- as.matrix(data[,2:4])
m
View(m)
summarize(m)
summary(m)
install.packages("quantmod")
library(quantmod)
quantmod::yahooQuote.EOD
print("good :)")
dreamerscatter <- function(ti){
if(ti == 100){
print("good :)")
}
}
dreamerscatter(100)
dreamerscatter <- function(ti){
if(ti == 100){
print("good :)")
} else {
print("not good :(")
}
}
dreamerscatter(13)
library(psych)
score <- sat.act
describe(score)
head(score)
length(score)
row(score)
nrow(score)
?sat.act
act <- score[, 3]
head(score)
act
act <- score[, 3]
satV <- score[, 4]
satQ <- score[, 5]
satTotal <- rowSums(score[, c(4:5)])
head(satTotal)
describe.by(score, group = "gender")
describeBy(score, group = "gender")
t.test(score)
type(score)
typeof(score)
getwd()
setwd("my/working/directory")
getwd()
setwd("/Users/randy/Desktop/Google é›²ç«¯ç¡¬ç¢Ÿ/Sync_Google drive/Uni/College/4_Senior & additional years/Spring 2021/Research methodology/Survey data")
packages <- c("ltm", "lavaan", "tidySEM", "psych", "ggplot2", "ggpubr", "GGally", "rstatix", "corrplot", "PerformanceAnalytics", "Hmisc", "nFactors", "paran", "dplyr", "pastecs")
lapply(packages, require, character.only = TRUE)
surv_dat <- read.csv("surv_dat.csv")
ars_rev_key <- c(1,-1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1)
demographic <- surv_dat[, c(1:2)] #contains gender and age information (in group)
flcas_rep <- surv_dat[, c(3:22)] #flcas responses
ars_rep <- reverse.code(ars_rev_key, surv_dat[, c(23:39)]) #reverse.code(key, data) / ars-30 responses
btps_rep <- surv_dat[, c(40:52)] #btps-sf responses
flcas_total <- rowSums(flcas_rep)
ars_total <- rowSums(ars_rep)
btps_total <- rowSums(btps_rep)
total_scores <- data.frame(flcas_total, ars_total, btps_total)
dem_total <- data.frame(demographic, flcas_total, ars_total, btps_total)
head(surv_dat)
surv_dat <- read.csv("surv_dat.csv")
ars_rev_key <- c(1,-1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1)
demographic <- surv_dat[, c(1:2)] #contains gender and age information (in group)
flcas_rep <- surv_dat[, c(3:22)] #flcas responses
ars_rep <- reverse.code(ars_rev_key, surv_dat[, c(23:39)]) #reverse.code(key, data) / ars-30 responses
btps_rep <- surv_dat[, c(40:52)] #btps-sf responses
flcas_total <- rowSums(flcas_rep)
ars_total <- rowSums(ars_rep)
btps_total <- rowSums(btps_rep)
total_scores <- data.frame(flcas_total, ars_total, btps_total)
dem_total <- data.frame(demographic, flcas_total, ars_total, btps_total)
head(surv_dat)
surv_dat <- read.csv("surv_dat.csv")
ars_rev_key <- c(1,-1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1)
demographic <- surv_dat[, c(1:2)] #contains gender and age information (in group)
flcas_rep <- surv_dat[, c(3:22)] #flcas responses
ars_rep <- reverse.code(ars_rev_key, surv_dat[, c(23:39)]) #reverse.code(key, data) / ars-30 responses
btps_rep <- surv_dat[, c(40:52)] #btps-sf responses
flcas_total <- rowSums(flcas_rep)
ars_total <- rowSums(ars_rep)
btps_total <- rowSums(btps_rep)
total_scores <- data.frame(flcas_total, ars_total, btps_total)
dem_total <- data.frame(demographic, flcas_total, ars_total, btps_total)
paged.table(head(surv_dat))
surv_dat <- read.csv("surv_dat.csv")
ars_rev_key <- c(1,-1,1,-1,1,-1,1,-1,1,1,1,1,1,1,1,1,-1)
demographic <- surv_dat[, c(1:2)] #contains gender and age information (in group)
flcas_rep <- surv_dat[, c(3:22)] #flcas responses
ars_rep <- reverse.code(ars_rev_key, surv_dat[, c(23:39)]) #reverse.code(key, data) / ars-30 responses
btps_rep <- surv_dat[, c(40:52)] #btps-sf responses
flcas_total <- rowSums(flcas_rep)
ars_total <- rowSums(ars_rep)
btps_total <- rowSums(btps_rep)
total_scores <- data.frame(flcas_total, ars_total, btps_total)
dem_total <- data.frame(demographic, flcas_total, ars_total, btps_total)
paged_table(head(surv_dat))
describe(surv_dat[, c(1:2)]) #demographic
describeBy(flcas_total)
describeBy(ars_total)
describeBy(btps_total)
?ginv
??ginv
??cor.wt
library(psych)
score <- sat.act
describe(score)
describe.by(score, gender)
describeBy(score, groupBy = "gender")
?describeBy
head(score)
describeBy(score, groupBy = "education")
describeBy(score)
summary(score)
describe(score)
describe(score[, c(1,2)])
describeBy(score, score$gender)
library(knitr)
?sat.act
?describe
summary(test_score)
test_score <- sat.act
summary(test_score)
describe(test_score, IQR=TRUE)
700/sqrt(112.9)
112.9/sqrt(700)
?MAD
?mad
?describe
?describeBy
describe(test_score ~ gender)
desp <- describe(test_score ~ gender)
typeof(desp)
describeBy(test_score, test_score$gender)
shapiro.test(test_score)
shapiro.test(test_score$ACT)
shapiro.test(test_score$SATV)
shapiro.test(test_score$SATQ)
library(ggpubr)
ggqqplot(test_score$ACT)
ggdensity(test_score$ACT)
pbeta()
pbeta(1)
?pbeta
?cor
cor(test_score$SATV, test_score$SATQ)
cor.test(test_score$SATV, test_score$SATQ)
cor.test(test_score$SATV, test_score$SATQ, method = c(spearman))
cor.test(test_score$SATV, test_score$SATQ, method = c("spearman"))
# Syntax: cor.test(variable1, variable2, method = "spearman")
cor.test(test_score$SATV, test_score$SATQ, method = "spearman")
# Syntax: cor.test(variable1, variable2, method = "spearman")
cor.test(test_score$SATV, test_score$SATQ, method = "spearman")
lm(test_score$ACT ~ test_score$SATQ + test_score$SATV)
score.lm <- lm(test_score$ACT ~ test_score$SATQ + test_score$SATV)
summary(score.lm)
# Syntax: lm(formula)
# Formula syntax: dependent_variable ~ independent_variable1 + independent_variable2 + ...+ independent_variable_n
# first, we construct and store the model onto a variable called score_lm
score_lm <- lm(test_score$ACT ~ test_score$SATQ + test_score$SATV)
# then, we use the summary() function to "summarize" the model
summary(score_lm)
# Syntax: lm(formula)
# Formula syntax: dependent_variable ~ independent_variable1 + independent_variable2 + ...+ independent_variable_n
# first, we construct and store the model onto a variable called score_lm
score_lm <- lm(test_score$ACT ~ test_score$SATQ + test_score$SATV)
# then, we use the summary() function to "summarize" the model
summary(score_lm)
ggplot(sat.act)
ggplot(c(sat.act$SATV, sat.act$SATQ))
ggplot(data.frame(sat.act$SATV, sat.act$SATQ))
head(test_score)
# load data set
test_score <- psych::sat.act
# retain ACT, SATV, SATQ score data only
test_score <- test_score[, c(4:6)]
# load library
library(PerformanceAnalytics)
# Syntax: cor.test(variable1, variable2)
chart.Correlation()
# Syntax: cor.test(variable1, variable2)
chart.Correlation(test_score)
test.t <- test_score[, c(3:5)]
test.t <- test_score[, c(4:6)]
test.t <- test_scores[, c(4:6)]
test_score
test_score <- psych::sat.act
test_score <- test_score[, c(4:6)]
corr.p(test_score)
corr.p(test_score, 3)
?corr.p
corr.test(test_score)
rcorr(test_score)
library(Hmisc)
rcorr(test_score)
rcorr(as.matrix(test_score)
)
# select the columns that contains only the test scores
test_score <- test_score[, c(4:6)]
# select the columns that contains only the test scores
test_score <- psych::sat.act
test_score <- test_score[, c(4:6)]
# Syntax: corr.test(data, method = "pearson" or "spearman")
corr.test(test_score)
# Syntax: ggpairs(data, columns = columns_with_data, ggplot2::aes(colour = grouping_variable))
ggpairs(test_score, columns = 4:6, ggplot2::aes(colour = gender))
library(ggplot2)
# load library and data set
test_score <- psych::sat.act
library(ggplot2)
library(GGally)
# Syntax: ggpairs(data, columns = columns_with_data, ggplot2::aes(colour = grouping_variable))
ggpairs(test_score, columns = 4:6, ggplot2::aes(colour = gender))
# load library and data set
test_score <- psych::sat.act
# Mutate data set
test_score$gender[test_score$gender==2] <- "Female"
test_score$gender[test_score$gender==1] <- "Male"
library(ggplot2)
library(GGally)
# Syntax: ggpairs(data, columns = columns_with_data, ggplot2::aes(colour = grouping_variable))
ggpairs(test_score, columns = 4:6, ggplot2::aes(colour = gender))
pie(sat.act$gender)
test_score <- psych:sat.act
test_score <- psych::sat.act
test_score$gender[test_score$gender==2] <- "Female"
test_score$gender[test_score$gender==1] <- "Male"
pie(test_score$gender)
head(test_score)
describe(test_score)
desp <- describe(test_score)
desp$gender$counts
desp$gender$units
desp$gender$descript
summary(test_score)
describe.by(test_score, group = gender)
describeBy(test_score, group = gender)
describeBy(test_score, group = "gender")
]
library(lavaan)
?sem
d <- c(1,2,3)
dd <- c(1,2,3,c(1,2,3))
dd
data.frame(dd)
library(psych)
score <- psych::sat.act
describe(score)
describe.by(score)
describe.by(score, group="gender")
# First, construct a vector containing your data (in counts)
gender_pie <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Then, use pie() to construct your pie chart
pie(slices, labels = lable, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
gender_pie <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Then, use pie() to construct your pie chart
pie(gender_pie, labels = lable, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
gender_pie <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Then, use pie() to construct your pie chart
pie(gender_pie, label = lable, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
gender_pie <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Then, use pie() to construct your pie chart
pie(gender_pie, label = label, main="Pie Chart of Gender")
'Male' + "100%"
paste("Male", 100, "%")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to label
percentage <- (slice/sum(slices) * 100)
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to label
percentage <- (slice/sum(slice) * 100)
label <- c(label, percentage, "%")
# Then, use pie() to construct your pie chart
pie(gender_pie, label = label, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to label
percentage <- (slice/sum(slice) * 100)
label <- c(label, percentage, "%")
# Then, use pie() to construct your pie chart
pie(slice, label = label, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to label
percentage <- (slice/sum(slice) * 100)
label <- c(label, percentage, "%", sep = "\n")
# Then, use pie() to construct your pie chart
pie(slice, label = label, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to label
percentage <- round(slice/sum(slice) * 100)
label <- c(label, percentage, "%", sep = "\n")
# Then, use pie() to construct your pie chart
pie(slice, label = label, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to label
percentage <- round(slice/sum(slice) * 100)
label <- paste(label, percentage, "%", sep = "\n")
# Then, use pie() to construct your pie chart
pie(slice, label = label, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to label
percentage <- round(slice/sum(slice) * 100)
label <- paste(label, percentage, "%", sep = " ")
# Then, use pie() to construct your pie chart
pie(slice, label = label, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male", "Female")
# Next, calculate the percentages for each category and append them to the labels
percentage <- round(slice/sum(slice) * 100)
label <- paste(label, percentage, "%")
# Then, use pie() to construct your pie chart
pie(slice, label = label, main="Pie Chart of Gender")
# First, construct a vector containing your data (in counts)
slice <- c(247, 453)
# Secondly, construct a vector containing the labels for your data (remember to surround them with quotation marks )
label <- c("Male ", "Female ")
# Next, calculate the percentages for each category and append them to the labels
percentage <- round(slice/sum(slice) * 100)
label <- paste(label, percentage, "%", sep = "")
# Then, use pie() to construct your pie chart
pie(slice, label = label, main="Pie Chart of Gender")
# First, I create a random data set. You should substitute this line with your data when doing your analysis
data <- c(1,4,7,10,14,30,22,19,14,10,4,2)
# Then, use the plot() function to generate a line graph
plot(data, type = "o")
# First, I create a random data set. You should substitute this line with your data when doing your analysis
data <- c(1,4,7,10,14,30,22,19,14,10,4,2)
# Then, use the plot() function to generate a line graph
plot(data, type = "o", xlab = "Index", ylab = "Data")
# Syntax: lm(formula)
# Formula syntax: dependent_variable ~ independent_variable1 + independent_variable2 + ...+ independent_variable_n
# first, we construct and store the model onto a variable called score_lm
score_lm <- lm(test_score$ACT ~ test_score$SATQ + test_score$SATV)
# then, we use the summary() function to "summarize" the model
summary(score_lm)
scores <- psych:sat.act
scores <- psych::sat.act
describe(scores)
describe.by(scores, group = "gender")
summary(score)
?describe
install.packages("jmv")
library(jmv)
descriptives(score)
# load package
library(stats)
# Syntax: var(data)
var(test_score$ACT)
# load package
library(stats)
# Syntax: var(data)
var(test_score)
# load package
library(stats)
# Syntax: var(data)
var(c(test_score$ACT, test_score$SATQ, test_score$SATV))
# load package
library(stats)
# Syntax: var(data)
var(test_score$ACT, test_score$SATQ, test_score$SATV)
# load package
library(stats)
# Syntax: var(data)
var(data.frame(test_score$ACT, test_score$SATQ, test_score$SATV))
# load package
library(stats)
# Syntax: var(data)
var([test_score$ACT, test_score$SATQ, test_score$SATV])
# load package
library(stats)
# Syntax: var(data)
var(test_score$ACT)
var(test_score$SATQ)
var(test_score$SATV)
test_Score$SATQ
test_score$SATQ
test_score$SATV
?var
# load package
library(stats)
# Syntax: var(data)
var(test_score$ACT)
var(test_score$SATQ, na.rm=TRUE)
var(test_score$SATV)
?sat.act
runif(10000000000, min = 10000000, max = 100000000)
runif(10000000, min = 10000000, max = 100000000)
library(rmarkdown)
names(knitr::knit_engines$get())
#include <Rcpp.h>
int hello() {
#include <Rcpp.h>
int main() {
#include <Rcpp.h>
int main() {
# is gcc there?
Sys.which('gcc')
.C('square', 9)
.C('square', 123)
# is gcc there?
Sys.which('gcc')
# is gcc there?
Sys.which('gcc')
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
v <- c(1,2,3)
rcpp_rcout(v)
v <- c(1,2,3)
.C('rcpp_rcout', v)
v <- c(1,2,3)
.C('rcpp_rcout', v)
v <- c(1,2,3)
.C('square', 2)
v <- c(1,2,3)
.C('square', 2)
v <- c(1,2,3)
.C('rcpp_rcout', v)
v <- c(1,2,3)
.C('rcpp_rcout', v)
v <- c(1,2,3)
.C('rcpp_rcout', v)
install.package("cpp11")
library(cpp11)
cpp11::cpp_source()
cpp11::cpp_source()
fibonacci(10L)
fibonacci(20L)
fibonacci(10L)
fibonacci(20L)
fibonacci(10L)
fibonacci(20L)
hi(10L)
hi(10L)
reticulate::repl_python()
